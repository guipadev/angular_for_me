{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ApiService {\n  constructor(http) {\n    this.http = http;\n    this._apiUrl = `https://rickandmortyapi.com/api`;\n  }\n  getCharacters() {\n    return this.http.get(`${this._apiUrl}/character`).pipe(map(response => response.results));\n  }\n  getLocations() {\n    return this.http.get(`${this._apiUrl}/location`).pipe(map(response => response.results));\n  }\n}\nApiService.ɵfac = function ApiService_Factory(t) {\n  return new (t || ApiService)(i0.ɵɵinject(i1.HttpClient));\n};\nApiService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ApiService,\n  factory: ApiService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAASA,GAAG,QAAQ,gBAAgB;;;AAKpC,OAAM,MAAOC,UAAU;EAErBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IADhB,YAAO,GAAG,iCAAiC;EACZ;EAEvCC,aAAa;IACX,OAAO,IAAI,CAACD,IAAI,CACbE,GAAG,CAAC,GAAG,IAAI,CAACC,OAAO,YAAY,CAAC,CAChCC,IAAI,CAACP,GAAG,CAAEQ,QAAa,IAAKA,QAAQ,CAACC,OAAO,CAAC,CAAC;EACnD;EAEAC,YAAY;IACV,OAAO,IAAI,CAACP,IAAI,CACbE,GAAG,CAAC,GAAG,IAAI,CAACC,OAAO,WAAW,CAAC,CAC/BC,IAAI,CAACP,GAAG,CAAEQ,QAAa,IAAKA,QAAQ,CAACC,OAAO,CAAC,CAAC;EACnD;;;mBAdWR,UAAU;AAAA;;SAAVA,UAAU;EAAAU,SAAVV,UAAU;EAAAW,YAFT;AAAM","names":["map","ApiService","constructor","http","getCharacters","get","_apiUrl","pipe","response","results","getLocations","factory","providedIn"],"sourceRoot":"","sources":["/home/yamid/Documents/angular_for_me/LAZY_LOADING_MODULES_RICKY_MORTY/src/app/core/services/api.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ApiService {\n  private _apiUrl = `https://rickandmortyapi.com/api`;\n  constructor(private http: HttpClient) {}\n\n  getCharacters() {\n    return this.http\n      .get(`${this._apiUrl}/character`)\n      .pipe(map((response: any) => response.results));\n  }\n\n  getLocations() {\n    return this.http\n      .get(`${this._apiUrl}/location`)\n      .pipe(map((response: any) => response.results));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}